/* Example definition of a simple mode that understands a subset of
 * JavaScript:
 */

CodeMirror.defineSimpleMode("simplemode", {
  // The start state contains the rules that are intially used
  start: [
    // The regex matches the token, the token property contains the type
    {regex: /"(?:[^\\]|\\.)*?(?:"|$)/, token: "string"},
    // You can match multiple tokens at once. Note that the captured
    // groups must span the whole string in this case
    //{regex: /(function)(\s+)([a-z$][\w$]*)/,
    // token: ["keyword", null, "variable-2"]},
    // Rules are matched in the order in which they appear, so there is
    // no ambiguity between this one and the one above
    
    {regex: /setup[ ]*{/, token: "sectionName", indent:true, next: "setup"},
    {regex: /(?:graph[ ]*{)/,token: "sectionName", indent: true, next: "graph"},
    {regex: /(?:video[ ]*{)/,token: "sectionName", indent: true, next: "video"},
    //{regex: /plot {/,token: "sectionName", indent:true, next: "plot"},
    {regex: /true|false|on|off/, token: "atom"},
    {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
     token: "number"},
    {regex: /\/\/.*/, token: "comment"},
    //{regex: /\/(?:[^\\]|\\.)*?\//, token: "variable-3"},
    // A next property will cause the mode to move to a different state
    {regex: /\/\*/, token: "comment", next: "comment"},
    {regex: /[-+\/*=<>!]+/, token: "operator"},
    {regex: /if|elif|else/, token: "keyword"}
    // indent and dedent properties guide autoindentation
    /*{regex: /[\{\[\(]/, indent: true},
    {regex: /[\}\]\)]/, dedent: true},*/
    //{regex: /[a-z$][\w$]*/, token: "variable"},
    // You can embed other modes with the mode property. This rule
    // causes all code between << and >> to be highlighted with the XML
    // mode.
    //{regex: /<</, token: "meta", mode: {spec: "xml", end: />>/}}
  ],
  // The multi-line comment state.
  setup: [
    {regex: /(?:debug|digits|doubleorder|dt|eps|fixed|graphs|maxorder|maxpower|maxstep|method|minorder|precision|prec|range|reach|test|tmax|tmin|warn|zero)\b/i,
     token: "keyword-setup"},
     {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
     token: "number"},
     {regex: /true|false/, token: "atom"},
    {regex: /}/, next: "start", dedent: true},
    {regex:/"/, next: "stringSetup"},
    {regex: /\/\/.*/, token: "comment"},
    {regex: /\/\*/, token: "comment", next: "commentSetup"}
  ],
  
  graph: [
    {regex: /(?:background|bg|colors|domain|polar|fill|font|foreground|fg|format|grid|height|labels|lalign|legend|lfont|linetypes|lt|log|lpos|marks|marksizes|msizes|mxtics|mytics|name|pattern|show|select|showorder|showord|square|style|thickness|title|values|width|xfmt|xlabel|xlogbase|xbase|xmax|xmin|xmult|xmultx|xmulty|xspace|xtics|yfmt|ylabel|ylogbase|ybase|ymax|ymin|ymult|ymultx|ymulty|yspace|ytics)\b/i,
     token: "keyword-graph"},
     {regex: /true|false/, token: "atom"},
     {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
     token: "number"},
     {regex:/"/, next: "stringGraph"},
     {regex: /}/, next: "start", dedent: true},
     {regex: /\/\/.*/, token: "comment"},
     {regex: /\/\*/, token: "comment", next: "commentGraph"}   
  ],

  video: [
    {regex: /(?:  background|bg|cairo|codec|colors|columns|cols|domain|polar|duration|dur|fill|font|foreground|fg|format|fps|grid|height|join|labels|lalign|legend|lfont|linetypes|lt|log|lpos|marks|marksizes|msizes|mxtics|mytics|name|pattern|quality|qual|realtime|rt|show|select|showorder|showord|speed|square|style|thickness|title|values|width|xfmt|xlabel|xlogbase|xbase|xmax|xmin|xmult|xmultx|xmulty|xspace|xtics|yfmt|ylabel|ylogbase|ybase|ymax|ymin|ymult|ymultx|ymulty|yspace|ytics)\b/i,
     token: "keyword-video"},
     {regex: /true|false/, token: "atom"},
     {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
     token: "number"},
     {regex:/"/, next: "stringVideo"},
    {regex: /}/, next: "start", dedent: true},
    {regex: /\/\/.*/, token: "comment"},
    {regex: /\/\*/, token: "comment", next: "commentVideo"} 
  ],

  stringSetup: [
    {regex:/"/,next:"setup"}
  ],

  stringGraph: [
    {regex:/"/,next:"graph"}
  ],

  stringVideo: [
    {regex:/"/,next:"video"}
  ],


  comment: [
    {regex: /.*?\*\//, token: "comment", next: "start"},
    {regex: /.*/, token: "comment"}
  ],

  commentSetup: [
    {regex: /.*?\*\//, token: "comment", next: "setup"},
    {regex: /.*/, token: "comment"}
  ],

  commentGraph: [
    {regex: /.*?\*\//, token: "comment", next: "graph"},
    {regex: /.*/, token: "comment"}
  ],

  commentVideo: [
    {regex: /.*?\*\//, token: "comment", next: "video"},
    {regex: /.*/, token: "comment"}
  ],
  // The meta property contains global information about the mode. It
  // can contain properties like lineComment, which are supported by
  // all modes, and also directives like dontIndentStates, which are
  // specific to simple modes.
  meta: {
    dontIndentStates: ["comment","commentSetup","commentGraph","commentVideo"],
    lineComment: "//"
  }
});
